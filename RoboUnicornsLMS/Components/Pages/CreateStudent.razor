@page "/CreateUser"
@rendermode InteractiveServer
@inject HttpClient HttpClient


<div class="container">
    <div class="row justify-content-start">
        <div class="col-md-6">
            <form class="form-floating mb-3">
                <h3>Create User</h3>
    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="fname" name="fname" @bind-value="Fname" placeholder="First name">
        <label for="fname" class="text-primary">First name</label>
    </div>
    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="lname" name="lname" @bind-value="Lname" placeholder="Last name">
        <label for="lname" class="text-primary">Last name</label>
    </div>

    <div class="form-floating mb-3">
        <input type="email" class="form-control @EmailValidationClass" id="email" @bind="Email" placeholder="name@example.com">
        <label for="email" class="text-primary">Email</label>
        @if (!IsValidEmail(Email))
        {
            <div class="invalid-feedback">
                Please enter a valid email address.
            </div>
        }
    </div>
    <div class="form-floating mb-3">
        <select class="form-select" id="course" @bind="SelectedCourseId" aria-label="Floating label select example">
            <option value="0" selected>Select a course</option>
            @foreach (var course in courses)
            {
                <option value="@course.Id">@course.Title</option>
            }
        </select>
        <label for="email" class="text-primary">Course</label>
        
    </div>
    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick="CreateUser">Submit</button>
    </div>
</form>
</div>
</div>
</div>

@code {

    List<Course> courses = new();
    String Fname;
    String Lname;
    String Email;
    int SelectedCourseId;
    string EmailValidationClass = "";

    protected override async Task OnInitializedAsync()
    {
        // await HttpClient.GetAsync("/api/courses");

        courses = await HttpClient.GetFromJsonAsync<List<Course>>("/api/courses") ?? new();


    }

    public async Task CreateUser()
    {
        var user = new User
            {
                FirstName = Fname,
                LastName = Lname,
                Email = Email,
                Password = "123",
                CourseID = SelectedCourseId
            };

        var response = await HttpClient.PostAsJsonAsync<User>("/api/Users", user);

        if (response.IsSuccessStatusCode)
        {
            // Handle success
        }
        else
        {
            // Handle error
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
