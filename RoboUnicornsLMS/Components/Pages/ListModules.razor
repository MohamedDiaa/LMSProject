@page "/ListModules/{courseId:int}"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject IToastService toastService

<PageTitle>Modules</PageTitle>

  <div class="container text-center">
            <h2>@courseTitle</h2>
        </div>

<div style="margin-bottom:100px" class="container">
    <div class="row align-items-center mb-3">
        <div class="col">
            <button class="btn btn-primary mr-2" @onclick="@( () => SetView("Modules") )">Modules</button>
            <button class="btn btn-primary mr-2" @onclick="@( () => SetView("Participants") )">Participants</button>
            <button class="btn btn-primary" @onclick="@( () => SetView("EditCourse") )">Edit Course</button>
        </div>

        <div class="col text-center">
               @if (currentView == "Modules")
            {
                <h3>Modules</h3>
            }
            else if (currentView == "Participants")
            {
                <h3>Participants</h3>
            }
            else if (currentView == "EditCourse")
            {
                <h3>Edit Course</h3>
            }
        </div>
        <div class="col"></div>
    </div>
</div>



    @if (currentView == "Modules")
    {
        <table class="table table-striped table-dark">

    <tr>
        <th>@nameof(Module.Title)</th>
        <th>@nameof(Module.Description)</th>
        <th>@nameof(Module.Start)</th>
        <th>@nameof(Module.End)</th>
    </tr>
    <tbody>
    @foreach (Module x in modules)
    {
        <tr>
            <td>
                <p>@x.Title</p>
            </td>
            <td>
                <p>@x.Description</p>
            </td>
            <td>
                <p>@x.Start.ToShortDateString()</p>
            </td>
            <td>
                <p>@x.End.ToShortDateString()</p>
            </td>
            <td>
                <a href="@($"moduleedit/{x.Id}")" class="btn btn-primary">Edit</a>
            </td>
            <td>
                <button type="button" class="btn btn-danger" @onclick="() => OpenDeleteDialog(x.Id)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

    }
    else if (currentView == "Participants")
    {

        <table class="table table-striped table-dark">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Email</th>
        <th scope="col">Role</th>
        <th scope="col">Registered</th>
         
    </tr>
    </thead>
    <tbody>
    
  @foreach (var user in participants)
                {
                    <tr>
                      <td><p>@user.FirstName</p></td>
                        <td><p>@user.Email</p></td>
                       
                    </tr>
                }
    
    </tbody>
</table>
        
    } 
    else if (currentView == "EditCourse")
    {
        <p>Edit course stuff here</p>
        @*TODO: ADD COURSE EDIT CODE HERE*@
    }


@if (currentView == "Modules")
{
  <div class="mb-3">
    <a href="@($"course/{courseId}/moduleadd")" class="btn btn-primary">Add New Module</a>
    </div>
} else if (currentView == "Participants")
{
    <div class="mb-3">
        <a class="btn btn-primary">Add New Participant</a>
    </div>
}

<ConfirmationDialog @ref="DeleteDialog" ConfirmedChanged="ConfirmDelete_Click" 
    ConfirmationTitle="Delete Module"
    ConfirmationMessage=@($"Do you want to delete module with ID {moduleId}?") />



@code {

    [Parameter]
    public int courseId { get; set; }

    private int moduleId { get; set; }

    public string courseTitle = "Loading...";

    private string currentView = "Modules";  // Default view

    List<Module> modules = new();
    List<User> participants = new();

    public RoboUnicornsLMS.Components.ConfirmationDialog DeleteDialog { get; set; }




    protected override async Task OnInitializedAsync()
    {  
        await LoadParticipantsDataAsync();
        await LoadModulesDataAsync();
        await LoadCourseDataAsync();


    }

    private async Task LoadModulesDataAsync()
    {
        try
        {
            modules = await HttpClient.GetFromJsonAsync<List<Module>>($"/api/Modules/Course/{courseId}") ?? new List<Module>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading modules: {ex.Message}");
        }
    }



    private async Task LoadParticipantsDataAsync()
    {
        try
        {
            participants = await HttpClient.GetFromJsonAsync<List<User>>($"/api/Courses/User/{courseId}") ?? new List<User>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading participants: {ex.Message}");
        }
    }

    private async Task LoadCourseDataAsync()
    {
        try
        {
            var course = await HttpClient.GetFromJsonAsync<Course>($"/api/Courses/{courseId}");
            if (course != null)
            {
                courseTitle = course.Title;
            }
            else
            {
                courseTitle = "Course not found";
            }
        }
        catch (Exception ex)
        {
            courseTitle = "Error loading course";
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
    }



    private void SetView(string view)
    {
        currentView = view;
    }

    protected void OpenDeleteDialog(int targetId)
    {
        moduleId = targetId;
        DeleteDialog.ShowDialog();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var response = await HttpClient.DeleteAsync($"/api/Modules/{moduleId}");
            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted module from the list so it disappears from the UI
                modules.Remove(modules.Single(m => m.Id == moduleId));
                toastService.ShowInfo($"Module with ID {moduleId} successfully deleted at: {DateTime.Now}");
            }
        }
    }
}
