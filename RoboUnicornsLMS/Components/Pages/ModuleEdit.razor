@page "/moduleedit/{ModuleId:int}"
@using LMS.api.Model
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h3>Edit Module</h3>

<EditForm Model="@ModuleToEdit" FormName="EditModuleForm" 
    OnValidSubmit="HandleValidSubmit"
    method="post">
    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText class="form-control" @bind-Value="@ModuleToEdit.Title" placeholder="Enter title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="@ModuleToEdit.Description" rows="3"  placeholder="Enter description"></InputTextArea>
    </div>

    <div class="mb-3">
        <label class="form-label">Start date</label>
        <InputDate class="form-control" @bind-Value="@ModuleToEdit.Start" placeholder="Enter start date"></InputDate>
    </div>

    <div class="mb-3">
        <label class="form-label">End date</label>
        <InputDate class="form-control" @bind-Value="@ModuleToEdit.End" placeholder="Enter end date"></InputDate>
    </div>

    <div class="mb-3">
        <InputSelect class="form-select" @bind-Value="@ModuleToEdit.CourseID">
            @foreach(var course in Courses)
            {
                <option value="@course.Id">@course.Title</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public int ModuleId { get; set; }

    [SupplyParameterFromForm]
    public Module ModuleToEdit { get; set; } = new Module();

    public List<Course> Courses { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        ModuleToEdit = await HttpClient.GetFromJsonAsync<Module>($"/api/modules/{ModuleId}");
        Courses = await HttpClient.GetFromJsonAsync<List<Course>>("/api/courses/");
    }

    protected async Task HandleValidSubmit()
    {
        var postBody = new
        {
            Id = ModuleId,
            Title = ModuleToEdit.Title,
            Description = ModuleToEdit.Description,
            Start = ModuleToEdit.Start,
            End = ModuleToEdit.End,
            CourseId = ModuleToEdit.CourseID
        };

        await HttpClient.PutAsJsonAsync($"/api/modules/{ModuleId}", postBody);
    }

    // Todo: Add handling for invalid submit and display validation errors on form
}
